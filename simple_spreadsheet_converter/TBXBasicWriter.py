#!/usr/bin/env python3

from functional import seq
from lxml import etree
from lxml.builder import E


class TBXBasicWriter:
    """Simple writer class which takes list of concepts in
    the following format:

    [ // main glossary
     [ // a concept
      ( // tuple of lang and term
       'en',
       'apple'
      )
     ],
    ]

    """

    @property
    def tbx_namespace(self):
        """Returns the TBX namespace URI."""
        return "urn:iso:std:iso:30042:ed-2"

    def __init__(self, src_lang: str, glossary: list, filenames: list):
        self.src_lang = src_lang
        self.glossary = glossary
        self.filenames = filenames

    def __get_xml_lang_attr(self):
        return etree.QName("http://www.w3.org/XML/1998/namespace", "lang")

    def __to_term_sec(self, term):
        term_sec = E.termSec(
            E.term(term)
        )
        return term_sec

    def __to_lang_sec(self, lang_term):
        (lang, term) = lang_term
        lang_sec = E.langSec(self.__to_term_sec(term))
        lang_sec.attrib[self.__get_xml_lang_attr()] = lang
        return lang_sec

    def __to_concept_entries(self, index_concept):
        (index, concept) = index_concept
        lang_secs = seq(concept).map(self.__to_lang_sec)
        concept_entry = E.conceptEntry(*lang_secs, id="c{}".format(index))
        return concept_entry

    def write(self, output_path: str):
        concept_entries = seq(enumerate(self.glossary)).map(
            self.__to_concept_entries)

        tbx = E.tbx(
            E.tbxHeader(
                E.fileDesc(
                    E.titleStmt(
                        E.title("CSV glossary generated by BYU TRG SimpleCSV-TBX-Basic Converter.")),
                    E.sourceDesc(
                        E.p("Converted from the following glossary files: {}".format(
                            self.filenames))
                    )
                )
            ),
            E.text(
                E.body(*concept_entries)
            ),
            style="dca",
            type="TBX-Basic",
            xmlns=self.tbx_namespace
        )
        tbx.attrib[self.__get_xml_lang_attr()] = self.src_lang

        tree = etree.ElementTree(tbx)
        tree.write(output_path,
                   pretty_print=True,
                   xml_declaration=True,
                   encoding="utf-8")
